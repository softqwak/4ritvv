<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="scintilla1.Text" xml:space="preserve">
    <value>class Person {
    virt Alive(add: int):int;
    Age: int = 0;
    Name: string = "noname";    
}

class Student extends Person {
    new(name: string, age: int) {
        print("new Student! name - ", name, " age - ", age);
        Age = age;
        Name = name;
    }

    impl alive(add: int): int {        
        Age = a + b + c + add;
        return Age;
    }
}

fn Main(): int {
    let iam: Student = new Student("Valentin", 20);
    for let i: int = 20 ; i &lt; 30; ++i {
        test: Student = new Student("test", i);
    }
    return 0;
}</value>
  </data>
  <data name="scintilla2.Text" xml:space="preserve">
    <value>fn printLn(s1: string, s2: string) {
  print(s1);
  print(s2);
  printLn("");
}

fn printLn(s: string, i: int) {
  print(s);
  print(i);
  printLn("");
}

class Shape {
  virt draw() {
  }
}

class Square extends Shape {
  side: int = 0;

  new(s: int) {
    side = s;
  }

  impl draw() {
    printLn("Square.draw side: ", side);
  }
}

class Circle extends Shape {
  radius: int = 0;

  new(r: int) {
    radius = r;
  }

  impl draw() {
    printLn("Circle.draw radius: ", radius);
  }
}

fn main(): float {
  for let i: int = 0; i &lt; 10; ++i {
    let p: Shape* = 0;
    
    if i % 2 == 0 {
      p = new Square((i + 1) * 10);
    } else {
      p = new Circle((i + 1) * 5);
    }

    p.draw();
    del p;
  }

  return 0.0;
}

a: int = 0;
        b: int = 10;
        a = b - 3;
        let c: int = a * b;

        for let i: int = 0 ; i &lt; 10; ++i 
        {
            if a &gt; b {
                if (a + b &gt; c) { 
                    print("ok"); 
                }
            }    
            if a == b || c &lt; d &amp;&amp; e &gt; f { 
                print("complex"); 
            }
        }</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>