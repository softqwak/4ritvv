<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="scintilla2.Text" xml:space="preserve">
    <value>fn printLn(s1: string, s2: string) {
  print(s1);
  print(s2);
  printLn("");
}

fn printLn(s: string, i: int) {
  print(s);
  print(i);
  printLn("");
}

class Shape {
  virt draw() {
  }
}

class Square extends Shape {
  side: int = 0;

  new(s: int) {
    side = s;
  }

  impl draw() {
    printLn("Square.draw side: ", side);
  }
}

class Circle extends Shape {
  radius: int = 0;

  new(r: int) {
    radius = r;
  }

  impl draw() {
    printLn("Circle.draw radius: ", radius);
  }
}

fn main(): float {
  for let i: int = 0; i &lt; 10; ++i {
    let p: Shape* = 0;
    
    if i % 2 == 0 {
      p = new Square((i + 1) * 10);
    } else {
      p = new Circle((i + 1) * 5);
    }

    p.draw();
    del p;
  }

  return 0.0;
}</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>