<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="scintilla2.Text" xml:space="preserve">
    <value>fn printLn(s1: string, s2: string) {
  print(s1);
  print(s2);
  printLn("");
}

fn printLn(s: string, i: int) {
  print(s);
  print(i);
  printLn("");
}

class Shape {
  virt draw() {
  }
}

class Square extends Shape {
  side: int = 0;

  new(s: int) {
    side = s;
  }

  impl draw() {
    printLn("Square.draw side: ", side);
  }
}

class Circle extends Shape {
  radius: int = 0;

  new(r: int) {
    radius = r;
  }

  impl draw() {
    printLn("Circle.draw radius: ", radius);
  }
}

fn main(): float {
  for let i: int = 0; i &lt; 10; ++i {
    let p: Shape* = 0;
    
    if i % 2 == 0 {
      p = new Square((i + 1) * 10);
    } else {
      p = new Circle((i + 1) * 5);
    }

    p.draw();
    del p;
  }

  return 0.0;
}</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>