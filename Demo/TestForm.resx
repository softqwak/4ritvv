<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="scintilla2.Text" xml:space="preserve">
    <value>fn printLn(s1: string, s2: string) {
  print(s1);
  print(s2);
  printLn("");
}

fn printLn(s: string, i: int) {
  print(s);
  print(i);
  printLn("");
}

class Shape {
  virt draw() {
  }
}

class Square extends Shape {
  side: int = 0;

  new(s: int) {
    side = s;
  }

  impl draw() {
    printLn("Square.draw side: ", side);
  }
}

class Circle extends Shape {
  radius: int = 0;

  new(r: int) {
    radius = r;
  }

  impl draw() {
    printLn("Circle.draw radius: ", radius);
  }
}

fn main(): float {
  for let i: int = 0; i &lt; 10; ++i {
    let p: Shape* = 0;
    
    if i % 2 == 0 {
      p = new Square((i + 1) * 10);
    } else {
      p = new Circle((i + 1) * 5);
    }

    p.draw();
    del p;
  }

  return 0.0;
}</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>